@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using NotificationSystem.Data

@inject NavigationManager _nav

@*================Notification Part=======================*@

<MudContainer>
    
    <MudBadge Content="@currentUserMgsList.Count()" Color="Color.Error" Overlap="true" Class="mx-6 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
    </MudBadge>
    <MudButton OnClick="NotificationHideShow">Hide/Show</MudButton>
    <h3>Notifications:@currentUserMgsList.Count() </h3>
    @foreach (var item in currentUserMgsList)
    {
        <p>@item.MsgId</p>
        <p>@item.SenderName</p>
        <p>@item.ReceiverName</p>
        <p>@item.MsgTitle</p>
        <p>@item.MsgBody</p>
        <p>@item.MsgDateSt</p>
    }

</MudContainer>
@*================Notification Part=======================*@


@*========================Sending Message part======================*@
<br />
<br />
Sender Name :
<MudTextField @bind-Value="notificationMessage.SenderName" ></MudTextField>
Receiver Name :
<MudTextField @bind-Value="notificationMessage.ReceiverName" ></MudTextField>
Message :
<MudTextField @bind-Value="notificationMessage.MsgTitle"></MudTextField>
<br />
<MudTextField @bind-Value="notificationMessage.MsgBody"></MudTextField>
<br />
<br />
<MudButton OnClick="Send" Disabled="@(!IsConnected)">Send msg</MudButton>
@*========================Sending Message part======================*@

@code {
    private List<NotificationMessage> allNOtificationMgs = new List<NotificationMessage>();
    private List<NotificationMessage> currentUserMgsList = new List<NotificationMessage>();
    private NotificationMessage notificationMessage = new NotificationMessage();
    private HubConnection hubConnection;
    private string BoxCss = "none";
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(_nav.ToAbsoluteUri("/chatHub")).Build();
        hubConnection.On<string, string, string, string>("ReceiveMessage", (senderName, receiverName, title, message) =>
        {
            allNOtificationMgs.Add(new NotificationMessage()
            {
                MsgId = allNOtificationMgs.Count() + 1,
                SenderName = senderName,
                ReceiverName = receiverName,
                MsgTitle=title,
                MsgBody=message
            });

            currentUserMgsList = allNOtificationMgs.Where(x => x.SenderName !=notificationMessage.SenderName).ToList();
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        await hubConnection.SendAsync("sendMessage", notificationMessage.SenderName
                                                   , notificationMessage.ReceiverName
                                                   , notificationMessage.MsgTitle
                                                   , notificationMessage.MsgBody);
        notificationMessage.MsgTitle = "";
        notificationMessage.MsgBody = "";

    }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private void NotificationHideShow()
    {
        if (BoxCss == "none") BoxCss = "block";
        else BoxCss = "none";


    }
}

